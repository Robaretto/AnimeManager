#  AnimeManager - Proyecto .NET MAUI Blazor Hybrid

Este proyecto fue creado como parte de una pr√°ctica educativa para aprender a desarrollar aplicaciones multiplataforma con **.NET MAUI Blazor Hybrid**, utilizando patrones de arquitectura simples, componentes visuales modernos (Bootstrap 5), y l√≥gica de negocio separada.

El objetivo fue construir una peque√±a app de escritorio donde se pueda **gestionar una colecci√≥n de animes** y usuarios, con login b√°sico.

---

## üß† ¬øQu√© hace la aplicaci√≥n?

- Muestra una galer√≠a de animes en formato de **cards** con imagen, t√≠tulo, g√©nero y a√±o. Para un usuario com√∫n sin privilegios.
- Permite realizar un **ABM (Alta, Baja, Modificaci√≥n)** de animes si el usuario se loguea.
- Tambi√©n permite gestionar usuarios con su propia vista y lista.
- Las im√°genes de los animes se leen desde **archivos locales** (`wwwroot/images/animes`).
- El men√∫ principal cambia din√°micamente si el usuario est√° logueado o no.
- El sistema est√° **hardcodeado**, es decir, **no guarda los datos en una base de datos ni en archivos**: todo se mantiene en memoria mientras se ejecuta la app.

---

## üõ†Ô∏è ¬øC√≥mo funciona el login?

- Se accede desde el men√∫ lateral, opci√≥n **"Iniciar sesi√≥n"**.
- Pod√©s usar cualquier **email y nombre** (no hay validaci√≥n real).
- Una vez logueada, se habilitan los botones para agregar, editar o eliminar animes.
- En el men√∫ se muestra un saludo y la opci√≥n **"Cerrar sesi√≥n"**.

---

## üìå Sobre el hardcodeo

Este proyecto **no usa una base de datos real**. En cambio:

- Los animes est√°n precargados en una lista dentro del archivo `AnimeService.cs`.
- Los usuarios tambi√©n est√°n gestionados en memoria, mediante `UsuarioService.cs`.
- No se persiste nada al cerrar la app.
> En un proyecto real, estos datos se guardar√≠an en una base de datos o archivo externo.

---

